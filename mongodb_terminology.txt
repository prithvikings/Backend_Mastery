In backend their are two server:
1. Application server (node)
2. database server (mongodb)

-Application server : It basically handle the routes and accept the request

-Database server : It basically handle the data and store the data in the database. 


What is collection?
------------------------
A collection is a group of documents in a MongoDB database. Each document in a collection has a unique 
_id field that uniquely identifies the document. Collections are similar to tables in relational databases,
but they are more flexible and can store a variety of data types.



What is schema? 
----------------
A schema is a blueprint or design for a database. It defines the structure of the data, including 
the fields, data types, and relationships between them. In MongoDB, a schema is not enforced at
the database level, but it can be enforced at the application level using validation rules.



Database -> Collection -> Document

CODE                    DATABASE
-----------------------------------------
mongoose.connect ->     Database Create
mongoose.model   ->     Collection Create
Create           ->     Document Create 





-------------------
1. Node.js (it is javascript runtime enviroment)  
2. Express.js (it is web application framework for Node.js,It is designed for building web applications and APIs)
3. MongoDB driver (to connect with database server)
4. Mongoose (to interact with database)
5. Passport.js (for authentication)
6. JWT (for authentication and authorization)
7. Multer (for file upload)
8. Bcrypt (for password hashing)
9. Helmet (for security)
10. Cors (for cross-origin resource sharing)


how does mongodb create id?
MongoDB automatically generates a unique identifier called ObjectId for each document stored in a collection if an _id field is not explicitly provided. The ObjectId is a 12-byte hexadecimal value designed to be globally unique.

Structure of ObjectId
MongoDB's ObjectId consists of 12 bytes structured as follows:

Bytes	Component	Description
4 bytes	Timestamp	Creation time in seconds since Unix epoch
5 bytes	Machine ID	Unique identifier for the machine
2 bytes	Process ID	Unique identifier for the process creating the ObjectId
3 bytes	Counter	    Incrementing counter to prevent duplication

64b94f29b57a1e5b3d2c8e45
-------------------
64b94f29 → Timestamp
b57a1e5b3d → Machine ID
2c8e → Process ID
45 → Counter